Tag autoresetevents ud af producer-consumer delen. Brug autoresetevents til top-half/bottom-half kommunikation mellem tråde med observer i stedet for.


Skriv opgaven om, så de laver sengen igen, men med blocking collection fra starten af.
Udvid opgaven med observer og strategy.



Hej Kristoffer

Det er godt du skriver :)

Mine hjælpelærere er med til at give detaljeret feedback, som jeg selvfølgelig læser igennem inden I får den tilbage i grupperne. Hvis der er noget, jeg synes ser underligt ud, læser jeg også journalerne igennem. Hjælpelærerne markerer også, hvis der er noget de mener, jeg bør se nærmere på. Hvis der er tvivl om en aflevering kan godkendes, læser jeg den altid, da det er mig, som godkender på baggrund af feedback og journaler.

Jeres aflevering var en, som blev markeret fordi steppermotor-koden er svær at forstå og ikke dokumenteret ordentligt. Så jeg kiggede koden igennem tilføjede mine kommentarer til den til feedback'en.

På baggrund af din mail, har jeg i dag nærlæst jeres journal og kode. Min feedback til begge dele kommer nedenfor. Jeg tror det svarer på dine spørgsmål og ellers må du selvfølgelig gerne skrive igen. Hvis du er interesseret, vil jeg også gerne vise dig et eksempel på en mere overskuelig måde at implementere steppermotorstyringen på.

Her er mine kommentarer:
I opdeler DC-motor øvelsen I et  "implementering" og et "realisering" afsnit, hvor det ser ud til at være henholdsvis software og hardware. I bør opdele i design og implementation I stedet for, hvor design er hvordan I har tænkt jer at løse opgaven, både for hardware og software, og implementation er hvordan den faktisk er løst. Jeg vil tro, at I er SW studerende, for det første jeg møder efter topdesignet er kode. Jeg vil nemmere kunne forstå koden, hvis jeg inden bliver præsenteret for den hardware, som koden skal styre.
I koden glemmer I at checke for overflow/underflow af perioden. Det undrer mig også, at I ændrer på periodetiden og ikke compare-value. Compare value er sat til 50. PWM komponenten loader periodetiden i sin counter og tæller ned. Så når jeres compare type er 'less', vil alle periodetider under 50 give 'true' i output. En periodetid på 49 vil derfor være 100% duty-cycle, men jeres udregning af dutycycle giver (100-(49*100/255) = 80.
I glemmer at fortælle om forventede resultater og faktiske resultater af den første øvelse. Lidt at det står i konklusionen, men det skal i sine egne afsnit, altså hvad forventer I at I vil se og hvad observerede I faktisk? Fik I motoren til at dreje rundt?
Eksperiment 2 er samme historie. I går direkte til koden og får slet ikke fortalt om, hvad der er i den hardware, som koden skal styre. Jeg har brug for et diagram over H-broen og et diagram over hvordan PSoC, H-bro og motor er sat sammen for at kunne forstå opstillingen og hvad koden gør. Det kan jeg ikke se ud af et foto og terminal-output.
Her mangler I også forventede og faktiske resultater.
For steppermotoren, mangler jeg også at få et diagram over opstillingen. Jeg kan ikke ud fra journalen se, hvordan de forskellige dele (PSoC, MOSFET og motor) er forbundet til hinanden.
Jeg forstår godt koden, men den er unødvendig kompleks og mangler dokumentation. Når I laver en tilstandsmaskine med funktionspointere, bør I lave et diagram til at forklare den. I bruger også en del variabler til at holde tilstande repræsenteret ved et tal. Lav dem om til enum-værdier i stedet for, det gør koden langt mere robust og lettere at læse.
I dette afsnit mangler I også forventede og faktiske resultater.
